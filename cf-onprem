#!/usr/bin/env bash
#

#set -x

if [ -f "./env-vars" ]; then
. ./env-vars
fi

source scripts/helpers.sh

OS=$(uname -s)
readonly HELM_VERSION="${CF_HELM_VERSION:-2.10.0}"
readonly CHANNEL="${CF_HELM_CHANNEL:-dev}"
readonly CODEFRESH_REPOSITORY=http://charts.codefresh.io/${CHANNEL}
readonly WORKING_DIR="$(dirname "$0")"
readonly SERVICE_ACCOUNT="${WORKING_DIR}/sa.json"
readonly VALUES_FILE="${WORKING_DIR}/values.yaml"
readonly DOCKER_CFG_YAML="${WORKING_DIR}/dockercfg.yaml"
readonly WEBTLS_VALUES_FILE="${WORKING_DIR}/webtls.yaml"

function msg() { echo -e "\e[32mINFO [$(date +%F\ %T)] ---> $1\e[0m"; }
function warning() { echo -e "\e[33mWARNING [$(date +%F\ %T)] ---> $1\e[0m"; }
function err() { echo -e "\e[31mERR [$(date +%F\ %T)] ---> $1\e[0m" ; exit 1; }

function usage() {
	echo "$0 [-h] [-y|--yes|--web-tls-key|--web-tls-cert]"
	exit 0
}

function ver() { printf "%03d%03d%03d%03d" $(echo "$1" | tr '.' ' '); }

function userConfirmContext() {
	msg "Your kubectl is configured with the following context: "
	kubectl config current-context
	read -r -p "Are you sure you want to continue? [y/N] " response

	if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]
	then
			msg "No problem, continuing with the script..."
	else
			msg "Exiting..."
			exit 0
	fi
}

function handleArgs() {
  [ "$1" == "-h" ] && usage
  while [[ $1 =~ ^(-(y)|--(yes|web-tls-key|web-tls-cert|set)) ]]
  do
    key=$1
    value=$2
    case $key in
      -y|--yes)
          CONFIRM_FLAG="true"
        ;;
      --web-tls-key)
          WebTlsKey="$value"
          shift
        ;;
      --web-tls-cert)
          WebTlsCert="$value"
          shift
        ;;
      --set)
          SET_VALUES="$SET_VALUES --set $value"
          shift
        ;;
    esac
    shift
  done

  if [[ -n "${WebTlsKey}" ]] || [[ -n "${WebTlsCert}" ]]; then
    [[ -z "${WebTlsKey}" ]] || [[ -z "${WebTlsCert}" ]] && err "Please specify both --web-tls-cert and --web-tls-key arguments"
    [[ ! -f "${WebTlsKey}" ]] && err "${WebTlsKey} file path not found. Please define correct path to the private key file."
    [[ ! -f "${WebTlsCert}" ]] && err "${WebTlsCert} file path not found. Please define correct path to the certificate full chain file."
    CUSTOM_TLS_CONF=1
  fi
}

function checkHelmInstalled() {
  if command -v helm >/dev/null 2>&1; then
    helm_version=$(helm version --client --short | sed 's/.*\: v//' | sed 's/+.*//')
    msg "helm is already installed and has version v$helm_version"
    [ $(ver $helm_version) -lt $(ver $HELM_VERSION) ] && \
    err "You have older helm version than required. Please upgrade to v$HELM_VERSION or newer !"
  else
    warning "helm is not installed"
    if [[ ! "$CONFIRM_FLAG" == 'true' ]]; then
    read -p "Do you want to install helm ? [y/n] " yn
      case ${yn} in
        y|Y)
          helmInstall
      ;;
        *)
          err "Need helm to deploy Codefresh app ! Exiting..."
          #exit 1
      ;;
      esac
    else
      helmInstall
    fi
  fi
}

function checkTillerInstalled() {
  status=$(kubectl -nkube-system get pod -l app=helm -l name=tiller -o=go-template --template='{{  range $i, $v := .items }}{{ if eq $v.status.phase "Running" }}{{ $v.status.phase }}{{ end }}{{ end }}')
  if [ "$status" == "Running" ]; then
    msg "Tiller is installed and running"
    helm init -c
    helm_version=$(helm version --client --short | sed 's/.*\: v//' | sed 's/+.*//')
    tiller_version=$(helm version --server --short | sed 's/.*\: v//' | sed 's/+.*//')
    if [[ ! "$CONFIRM_FLAG" == 'true' ]] && [ $(ver $tiller_version) -lt $(ver $helm_version) ]; then
      warning "You're running helm v$helm_version but tiller has v$tiller_version."
      read -p  " Do you want to upgrade tiller to v$helm_version ? [y/n] " yn
      case ${yn} in
        y|Y)
          kubectl create -f ./tiller-rbac-config.yaml > /dev/null 2>&1
          helm init --upgrade --service-account tiller --wait
      ;;
        *)
          err "You need to upgrade tiller ! Exiting..."
      ;;
      esac
    fi
    if [[ "$CONFIRM_FLAG" == 'true' ]] && [ $(ver $tiller_version) -lt $(ver $helm_version) ]; then
      err "You're running helm v$helm_version but tiller has v$tiller_version . You need to upgrade tiller ! Exiting..."
    fi
  else
    warning "Unable to determine tiller at its default location."
    if [[ ! "$CONFIRM_FLAG" == 'true' ]]; then
      read -p  " Do you want to deploy tiller ? [y/n] " yn
      case ${yn} in
        y|Y)
          kubectl create -f ./tiller-rbac-config.yaml
          helm init --service-account tiller --wait
      ;;
        *)
          err "Need to deploy tiller ! Exiting..."
          exit 1
      ;;
      esac
    else
      kubectl create -f ./tiller-rbac-config.yaml
      helm init --service-account tiller --wait
    fi
  fi

}

function checkTillerStatus() {
	while true; do
    status=$(kubectl -nkube-system get pod -l app=helm -l name=tiller -o=go-template --template='{{  range $i, $v := .items }}{{ if eq $v.status.phase "Running" }}{{ $v.status.phase }}{{ end }}{{ end }}')

	  msg "Tiller status = $status"
	  [ "$status" == "Running" ] && break

	  msg "Sleeping 5 seconds ..."
	  sleep 5

	done
}

function runPreInstallChecks() {
  msg "Checking if the Codefresh SA file is present..."
  
  msg "Checking helm binary on your system"
  checkHelmInstalled

  msg "Checking if tiller is installed on kubernetes cluster"
  checkTillerInstalled

  msg "Checking tiller status..."
  checkTillerStatus

}

function helmInstall() {
  OS=$(echo $OS | tr "[:upper:]" "[:lower:]")
  msg "Downloading and installing helm..."

  wget https://storage.googleapis.com/kubernetes-helm/helm-v${HELM_VERSION}-${OS}-amd64.tar.gz -P /tmp/
  tar xvf /tmp/helm-v${HELM_VERSION}-${OS}-amd64.tar.gz -C /tmp/
  chmod +x /tmp/${OS}-amd64/helm
  sudo mv /tmp/${OS}-amd64/helm /usr/local/bin/
  rm -rf /tmp/helm-v${HELM_VERSION}-${OS}-amd64 /tmp/helm-v${HELM_VERSION}-${OS}-amd64.tar.gz
}

function generateWebTlsValuesFile() {
  msg "Generating TLS values file..."

  WEBTLSKEY=$(cat ${WebTlsKey} | sed 's/^/    /')
  WEBTLSCERT=$(cat ${WebTlsCert} | sed 's/^/    /')

  WEBTLSKEY_CFUI=$(cat ${WebTlsKey} | sed 's/^/      /')
  WEBTLSCERT_CFUI=$(cat ${WebTlsCert} | sed 's/^/      /')

cat <<-EOF >${WEBTLS_VALUES_FILE}
---
webTLS:
  key: |
${WEBTLSKEY}
  cert: |
${WEBTLSCERT}

cfui:
  webTLS:
    key: |
${WEBTLSKEY_CFUI}
    cert: |
${WEBTLSCERT_CFUI}
EOF
#  echo "Success!"
#  exit 0
}

function generateDockerValuesFile(){

  DOCKER_CFG_JSON=$(cat ${SERVICE_ACCOUNT})

  if [ $OS == "Linux" ]; then
    BASE64="base64 -w0"
  else
    BASE64="base64"
  fi

  DOCKER_CFG_VAR=$(echo -n "_json_key:${DOCKER_CFG_JSON}" | $BASE64)

  cat <<EOF >${DOCKER_CFG_YAML}
---
dockerconfigjson:
  auths:
    gcr.io:
      auth: ${DOCKER_CFG_VAR}

cfui:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

runtime-environment-manager:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

onboarding-status:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

cfanalytic:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}
EOF

}

function configureDeployment() {
  [ -n "$CUSTOM_TLS_CONF" ] && generateWebTlsValuesFile && WEBTLS_VALUES="--values ${WEBTLS_VALUES_FILE}"
  generateDockerValuesFile
  msg "Adding Helm repo..."
  helm repo add codefresh-onprem-${CHANNEL} "${CODEFRESH_REPOSITORY}"
}

function validateInputValues() {
  
  local valuesParsed
  local key
  local value

  set -f

  mapfile -t valuesParsed < <(parse_yaml values.yaml)

  for key_value in "${valuesParsed[@]}"; do
      key=$(echo $key_value | cut -d '=' -f 1)
      value=$(echo $key_value | cut -d '=' -f 2)

    case $key in
      global_appProtocol)
        regexMatch $value 'http|https'
        ;;
      global_appUrl)
        echo $value
        regexMatch $value $dnsRegexp
        ;;
      firebaseSecret)
        [[ $(echo $value | wc -c) == 41 ]] || err "Firebase token is invalid: must be 41 characters long"
        ;;
      rbacEnable)
        regexMatch $value '^true$|^false$' "$key flag must be either true or false"
        ;;
      ingress_domain)
        regexMatch $value $dnsRegexp
        ;;
      cfapi_rbacEnable)
        ;;
      webTLS_secretName)
        ;;
      backups_enabled)
        regexMatch $value '^true$|^false$' "$key flag must be either true or false"
        ;;
      backups_awsAccessKey)
        [[ $(echo $value | wc -c) == 21 ]] || err "AWS access key ID is invalid: must be 21 characters long"
        ;;
      backups_awsSecretAccessKey)
        [[ -n $key ]] || err "AWS access key must not be empty"
        ;;
      backups_s3Url)
        regexMatch $value "^s3:\/\/" || err "Backups S3 URL is invalid. Pattern should be s3://<some-bucket>"
        ;;
      mongodb_persistence_enabled)
        regexMatch $value '^true$|^false$' "$key flag must be either true or false"
        ;;

        # ... further checks later
    esac
  done
  
}

function validateConfiguration() {
  local valuesParsed
  local key
  local value

  set -f

  mapfile -t valuesParsed < <(parse_yaml values.yaml)

  declare -A valuesMap        
    for key_value in "${valuesParsed[@]}"; do
      key=$(echo $key_value | cut -d '=' -f 1)
      value=$(echo $key_value | cut -d '=' -f 2)
      valuesMap[$key]=$value
    done

  if [[ ${valuesMap[backups_enabled]} == true ]]; then
    [[ -z ${valuesMap[backups_awsAccessKey]} ]] || [[ -z ${valuesMap[backups_awsSecretAccessKey]} ]] || [[ -z ${valuesMap[backups_s3Url]} ]] && err "In case if backups_enabled is true, all the related values must be provided"
  fi
  # ... further checks later
}

handleArgs $@
runPreInstallChecks
validateInputValues
configureDeployment
validateConfiguration

msg "Starting on-prem Codefresh deployment"

[ "$CONFIRM_FLAG" == 'true' ] || userConfirmContext

#MTU_VALUE="--set global.mtu=$(cat /sys/class/net/cni0/mtu)"
#TIMESTAMP=$(date +%F_%H-%M-%S)
# --values "${SECRET_VALUES_FILE}" \
#  --version 0.6.62 \
#  --force \

cf_status=$(helm ls -q cf)

[ -z "${cf_status}" ] && SEEDJOBS="--set global.seedJobs=true" && CERTJOBS="--set global.certsJobs=true"

msg "Installing/Updating Codefresh..."
helm upgrade cf codefresh-onprem-${CHANNEL}/codefresh \
  --install \
  --namespace codefresh \
  --values "${VALUES_FILE}" \
  --values "${DOCKER_CFG_YAML}" \
  ${WEBTLS_VALUES} \
  --no-hooks \
  --set cfapi.redeploy=true \
  ${SEEDJOBS} \
  ${CERTJOBS} \
  ${SET_VALUES}
#  ${MTU_VALUE}
