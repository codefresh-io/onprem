global:

### expose codefresh internal registry from ingress
  #registryPort: 443
  #exposeRegistry: true

### configuring external mongo database service
  #mongodbRootUser: my-mongo-admin-user
  #mongodbRootPassword: yeqTeVwqVa9qDqebq
  #mongoURI: mongodb://someuser:mTiqweAsdw@my-mongo-cluster-shard-00-00-vziq1.mongodb.net:27017/?ssl=true
  #mongoSkipUserCreation: true
  #mongoDeploy: false   # disables deployment of internal mongo service
  postgresUser: codefresh

  appProtocol: https
### Codefresh App domain name
  #appUrl: g.apps-os-t2.cf-cd.com
  appUrl: codefresh-dev.v12.np01.ocp.six-group.net

  clusterProvidersPort: 8080
  runtimeEnvironmentManagerPort: 8080
# Storage class for all persistent services (only in case your storage class supports automatic volume provisioning). By default Codefresh will use the default storage class configured in your cluster, if the storage class you want to use isn't set as default in your k8s cluster please use this variable to describe it
#  storageClass: my-storage-class

# Default nodeSelector for storage pods. Useful in case of local volumes
#  storagePodNodeSelector:
#    kubernetes.io/hostname: storage-host-01

### MTU Value for dockerd in builder and runner
#  mtu: 1400

### Environment variables applied to all pods
# env:
#   HTTP_PROXY: "http://10.0.0.145:8080"
#   http_proxy: "http://10.0.0.145:8080"
#   HTTPS_PROXY: "http://10.0.0.145:8080"
#   https_proxy: "http://10.0.0.145:8080"
#   NO_PROXY: "127.0.0.1,localhost,kubernetes.default.svc,.codefresh.svc,100.64.0.1,169.254.169.254,cf-builder,cf-cfapi,cf-cfui,cf-chartmuseum,cf-charts-manager,cf-cluster-providers,cf-consul,cf-consul-ui,cf-context-manager,cf-cronus,cf-helm-repo-manager,cf-hermes,cf-ingress-controller,cf-ingress-http-backend,cf-kube-integration,cf-mongodb,cf-nats,cf-nomios,cf-pipeline-manager,cf-postgresql,cf-rabbitmq,cf-redis,cf-registry,cf-runner,cf-runtime-environment-manager,cf-store,cf-tasker-kubernetes"
#   no_proxy: "127.0.0.1,localhost,kubernetes.default.svc,.codefresh.svc,100.64.0.1,169.254.169.254,cf-builder,cf-cfapi,cf-cfui,cf-chartmuseum,cf-charts-manager,cf-cluster-providers,cf-consul,cf-consul-ui,cf-context-manager,cf-cronus,cf-helm-repo-manager,cf-hermes,cf-ingress-controller,cf-ingress-http-backend,cf-kube-integration,cf-mongodb,cf-nats,cf-nomios,cf-pipeline-manager,cf-postgresql,cf-rabbitmq,cf-redis,cf-registry,cf-runner,cf-runtime-environment-manager,cf-store,cf-tasker-kubernetes"

### Firebase secret
firebaseSecret: none
jobServiceAccountName: codefresh-app

rbacCreate: false
tls:
  selfSigned: true

ingress:
  enabled: false
nomios:
  ingress:
    enabled: false
helm-repo-manager:
  chartmuseum:
    publicHelmRepo: false

cfapi:
  targetPort: 8080
  rbacCreate: false
  serviceAccountName: codefresh-app
  env:
    EVENT_REPORTING_URL: http://cf-cfapi/api/workflow/

  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi


cf-broadcaster:
  port: 8080
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

cfui:
  port: 8080

cluster-providers:
  port: 8080
  targetPort: 8080
runtime-environment-manager:
  port: 8080

## Custom annotations for Codefresh ingress resource that override defaults
#annotations:
#  kubernetes.io/ingress.class: nginx-codefresh

## Persistent services (mongodb, consul, postgress, redit, rabbit) configuration
# you can configure storageClass for dynamic volume provisoning or precreated existingPvc name
# existingPvc should exist before launching the intallation and takes precedence over storageClass
#
# Specify node selector if

# Example 1, mongodb with storageClass for dynamic volume provisoning:
# mongodb:
#   storageClass: ceph-pool-1
#   storageSize: 8Gi
#
# Example 2, postgresql on precreated pvc for local volume on cpecific volume
#
# postgresql:
#   existingPvc: cf-postgress-lv
#   nodeSelector:
#     kubernetes.io/hostname: storage-host-01

builder:
  enabled: false
runner:
  enabled: false
registry:
  enabled: false

mongo:
  enabled: false
rabbitmq:
  enabled: false
redis:
  enabled: false
postgresql:
  enabled: false

helm-repo-manager:
  enabled: false

hermes:
  enabled: true

chartmuseum:
  localHelmRepo: false

consul:
  Image: codefresh/consul
  ImageTag: "1.0.0"
  persistence:
    enable: true
  storageSize: 1Gi
  storageClass:
  #existingPvc: cf-consul-0
  #nodeSelector:oc get
#   storageClass:
#   #existingPvc: cf-cronus
#   #nodeSelector:
#   #  kubernetes.io/hostname: storage-host-01

# chartmuseum:
#   storageSize: 8Gi
#   storageClass:
#   #existingPvc: cf-chartmuseum
#   #nodeSelector:
#   #  kubernetes.io/hostname: storage-host-01

# hermes:
#   redis:
# ## Set hermes store password. It is mandatory
#     redisPassword: verysecurepassword
#     storageSize: 8Gi
#     storageClass:
#     #existingPvc: cf-store
#     #nodeSelector:
#     #  kubernetes.io/hostname: storage-host-01

# backups:
#   #enabled: true
#   awsAccessKey:
#   awsSecretAccessKey:
#   s3Url: s3://<some-bucket>
